import React, { useState, useEffect } from ‘react’;
import { Calendar, ChevronLeft, ChevronRight, Clock, MapPin } from ‘lucide-react’;

const BookingDatePicker = () => {
const [selectedDate, setSelectedDate] = useState(null);
const [currentMonth, setCurrentMonth] = useState(new Date());
const [isOpen, setIsOpen] = useState(false);

// Get current date and calculate suggestions
const today = new Date();
const tomorrow = new Date(today);
tomorrow.setDate(today.getDate() + 1);

// Calculate this weekend (Saturday)
const thisWeekend = new Date(today);
const daysUntilSaturday = (6 - today.getDay()) % 7;
if (daysUntilSaturday === 0 && today.getDay() !== 6) {
thisWeekend.setDate(today.getDate() + 7); // Next Saturday if today is Sunday
} else {
thisWeekend.setDate(today.getDate() + daysUntilSaturday);
}

// Calculate next weekend (next Saturday)
const nextWeekend = new Date(today);
nextWeekend.setDate(today.getDate() + daysUntilSaturday + 7);

// Quick suggestion options
const suggestions = [
{ label: ‘Today’, date: today, available: true },
{ label: ‘Tomorrow’, date: tomorrow, available: true },
{ label: ‘This Weekend’, date: thisWeekend, available: true },
{ label: ‘Next Weekend’, date: nextWeekend, available: false }, // Example: unavailable
];

// Format date for display
const formatDate = (date) => {
if (!date) return ‘Select date’;
const options = {
weekday: ‘short’,
month: ‘short’,
day: ‘numeric’,
year: date.getFullYear() !== today.getFullYear() ? ‘numeric’ : undefined
};
return date.toLocaleDateString(‘en-US’, options);
};

// Generate calendar days
const generateCalendarDays = () => {
const firstDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);
const lastDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);
const startDate = new Date(firstDay);
startDate.setDate(startDate.getDate() - firstDay.getDay());

```
const days = [];
for (let i = 0; i < 42; i++) {
  const date = new Date(startDate);
  date.setDate(startDate.getDate() + i);
  days.push(date);
}
return days;
```

};

const calendarDays = generateCalendarDays();

// Check if date is selectable (not in the past)
const isSelectableDate = (date) => {
const today = new Date();
today.setHours(0, 0, 0, 0);
const checkDate = new Date(date);
checkDate.setHours(0, 0, 0, 0);
return checkDate >= today;
};

// Check if date is selected
const isSelectedDate = (date) => {
if (!selectedDate) return false;
return date.toDateString() === selectedDate.toDateString();
};

// Check if date is in current month
const isCurrentMonth = (date) => {
return date.getMonth() === currentMonth.getMonth();
};

// Handle date selection
const handleDateSelect = (date) => {
if (isSelectableDate(date)) {
setSelectedDate(date);
setIsOpen(false);
}
};

// Handle suggestion click
const handleSuggestionClick = (suggestion) => {
if (suggestion.available) {
setSelectedDate(suggestion.date);
setIsOpen(false);
}
};

// Navigate months
const goToPreviousMonth = () => {
setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1));
};

const goToNextMonth = () => {
setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1));
};

const monthNames = [
‘January’, ‘February’, ‘March’, ‘April’, ‘May’, ‘June’,
‘July’, ‘August’, ‘September’, ‘October’, ‘November’, ‘December’
];

const dayNames = [‘Sun’, ‘Mon’, ‘Tue’, ‘Wed’, ‘Thu’, ‘Fri’, ‘Sat’];

return (
<div className="max-w-md mx-auto p-6 bg-white">
{/* Demo booking context */}
<div className="mb-6 p-4 bg-blue-50 rounded-lg">
<h3 className="font-semibold text-gray-900 mb-2 flex items-center">
<MapPin className="h-4 w-4 mr-2 text-blue-600" />
Sunset Sailing Experience
</h3>
<p className="text-sm text-gray-600 mb-2">San Francisco Bay • 3 hours</p>
<div className="flex items-center text-sm text-gray-500">
<Clock className="h-4 w-4 mr-1" />
Departure: 5:00 PM daily
</div>
</div>

```
  {/* Date Picker Component */}
  <div className="relative">
    <label className="block text-sm font-medium text-gray-700 mb-2">
      Select Date
    </label>
    
    {/* Quick Suggestions */}
    <div className="grid grid-cols-2 gap-2 mb-4">
      {suggestions.map((suggestion, index) => (
        <button
          key={index}
          onClick={() => handleSuggestionClick(suggestion)}
          disabled={!suggestion.available}
          className={`p-3 text-sm font-medium rounded-lg border transition-all duration-200 ${
            suggestion.available
              ? 'border-gray-200 hover:border-blue-500 hover:bg-blue-50 text-gray-700 hover:text-blue-700'
              : 'border-gray-100 bg-gray-50 text-gray-400 cursor-not-allowed'
          } ${
            selectedDate && suggestion.date.toDateString() === selectedDate.toDateString()
              ? 'border-blue-500 bg-blue-50 text-blue-700'
              : ''
          }`}
        >
          <div className="font-semibold">{suggestion.label}</div>
          <div className="text-xs mt-1">
            {suggestion.available ? formatDate(suggestion.date) : 'Unavailable'}
          </div>
        </button>
      ))}
    </div>

    {/* Selected date display / Calendar trigger */}
    <button
      onClick={() => setIsOpen(!isOpen)}
      className="w-full p-3 border border-gray-300 rounded-lg text-left bg-white hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
    >
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <Calendar className="h-5 w-5 text-gray-400 mr-3" />
          <span className={selectedDate ? 'text-gray-900' : 'text-gray-500'}>
            {formatDate(selectedDate)}
          </span>
        </div>
        <ChevronRight className={`h-5 w-5 text-gray-400 transition-transform ${isOpen ? 'rotate-90' : ''}`} />
      </div>
    </button>

    {/* Calendar Dropdown */}
    {isOpen && (
      <div className="absolute z-50 mt-2 p-4 bg-white border border-gray-200 rounded-lg shadow-lg w-full">
        {/* Calendar Header */}
        <div className="flex items-center justify-between mb-4">
          <button
            onClick={goToPreviousMonth}
            className="p-1 hover:bg-gray-100 rounded"
          >
            <ChevronLeft className="h-5 w-5 text-gray-600" />
          </button>
          <h3 className="font-semibold text-gray-900">
            {monthNames[currentMonth.getMonth()]} {currentMonth.getFullYear()}
          </h3>
          <button
            onClick={goToNextMonth}
            className="p-1 hover:bg-gray-100 rounded"
          >
            <ChevronRight className="h-5 w-5 text-gray-600" />
          </button>
        </div>

        {/* Day names */}
        <div className="grid grid-cols-7 gap-1 mb-2">
          {dayNames.map(day => (
            <div key={day} className="text-center text-xs font-medium text-gray-500 py-2">
              {day}
            </div>
          ))}
        </div>

        {/* Calendar days */}
        <div className="grid grid-cols-7 gap-1">
          {calendarDays.map((date, index) => {
            const isSelectable = isSelectableDate(date);
            const isSelected = isSelectedDate(date);
            const isInCurrentMonth = isCurrentMonth(date);

            return (
              <button
                key={index}
                onClick={() => handleDateSelect(date)}
                disabled={!isSelectable}
                className={`
                  h-10 w-10 text-sm rounded-lg transition-all duration-150
                  ${isSelected 
                    ? 'bg-blue-600 text-white hover:bg-blue-700' 
                    : isSelectable && isInCurrentMonth
                    ? 'hover:bg-blue-50 text-gray-900'
                    : isSelectable && !isInCurrentMonth
                    ? 'hover:bg-gray-50 text-gray-400'
                    : 'text-gray-300 cursor-not-allowed'
                  }
                  ${date.toDateString() === today.toDateString() && !isSelected
                    ? 'bg-gray-100 font-semibold'
                    : ''
                  }
                `}
              >
                {date.getDate()}
              </button>
            );
          })}
        </div>

        {/* Footer */}
        <div className="mt-4 pt-3 border-t border-gray-100">
          <div className="flex justify-between items-center">
            <button
              onClick={() => setIsOpen(false)}
              className="px-4 py-2 text-sm text-gray-600 hover:text-gray-800"
            >
              Cancel
            </button>
            <button
              onClick={() => {
                setSelectedDate(today);
                setIsOpen(false);
              }}
              className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200"
            >
              Today
            </button>
          </div>
        </div>
      </div>
    )}
  </div>

  {/* Selected date confirmation */}
  {selectedDate && (
    <div className="mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
      <div className="flex items-center">
        <div className="flex-shrink-0">
          <Calendar className="h-5 w-5 text-green-600" />
        </div>
        <div className="ml-3">
          <p className="text-sm font-medium text-green-800">
            Date Selected
          </p>
          <p className="text-sm text-green-700">
            {selectedDate.toLocaleDateString('en-US', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </p>
        </div>
      </div>
    </div>
  )}

  {/* Continue button */}
  <button
    disabled={!selectedDate}
    className={`w-full mt-6 px-6 py-3 rounded-lg font-semibold transition-all duration-200 ${
      selectedDate
        ? 'bg-blue-600 text-white hover:bg-blue-700 shadow-md hover:shadow-lg'
        : 'bg-gray-100 text-gray-400 cursor-not-allowed'
    }`}
  >
    Continue to Time Selection
  </button>
</div>
```

);
};

export default BookingDatePicker;