import React, { useState, useEffect } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import {
  Search,
  Calendar,
  Filter,
  Plus,
  MoreHorizontal,
  Edit2,
  Copy,
  Archive,
  Star,
  Users,
  Clock,
  MapPin,
  DollarSign,
  Eye,
  Settings,
  ChevronDown,
  Heart,
  Share2,
  Trash2,
  BarChart3,
  Camera,
  Globe,
  Activity,
  X,
  ChevronRight,
  ChevronLeft,
  Check,
  Tag,
  FileText,
  Shield,
  Upload,
  AlertCircle
} from 'lucide-react';

// Types
interface Adventure {
  id: string;
  title: string;
  description: string;
  location: string;
  activity_type: string;
  duration_hours: number;
  max_guests: number;
  price_per_person: number;
  rating: number;
  total_reviews: number;
  primary_image_url: string;
  status: 'draft' | 'active' | 'paused' | 'archived';
  created_at: string;
  updated_at: string;
  tags: string[];
  difficulty_level: string;
  total_bookings: number;
}

interface AdventureForm {
  title: string;
  description: string;
  short_description: string;
  activity_type: string;
  category: string[];
  location: string;
  specific_location: string;
  country: string;
  duration_hours: number;
  duration_display: string;
  max_guests: number;
  min_guests: number;
  price_per_person: number;
  difficulty_level: string;
  primary_image_url: string;
  additional_images: string[];
  included_amenities: string[];
  what_to_bring: string[];
  min_age: number;
  max_age: number;
  age_restriction_details: string;
  weather_contingency: string;
  seasonal_availability: string[];
  tags: string[];
}

// Mock data
const mockAdventures: Adventure[] = [
  {
    id: '1',
    title: 'Mediterranean Yacht Cruise',
    description: 'Explore the stunning Greek islands on a luxurious yacht, stopping at picturesque ports and enjoying crystal-clear waters.',
    location: 'Santorini, Greece',
    activity_type: 'Sailing Tour',
    duration_hours: 7,
    max_guests: 12,
    price_per_person: 3500,
    rating: 5.0,
    total_reviews: 24,
    primary_image_url: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400&h=300&fit=crop',
    status: 'active',
    created_at: '2024-06-15',
    updated_at: '2024-07-10',
    tags: ['Luxury', 'Sailing', 'Greek Islands'],
    difficulty_level: 'All Levels',
    total_bookings: 15
  },
  {
    id: '2',
    title: 'Safari Wildlife Adventure',
    description: 'Witness the incredible wildlife of the African savanna, tracking lions, elephants, and other magnificent creatures.',
    location: 'Serengeti National Park',
    activity_type: 'Wildlife Tour',
    duration_hours: 240,
    max_guests: 10,
    price_per_person: 4200,
    rating: 0,
    total_reviews: 0,
    primary_image_url: 'https://images.unsplash.com/photo-1516026672322-bc52d61a55d5?w=400&h=300&fit=crop',
    status: 'draft',
    created_at: '2024-07-01',
    updated_at: '2024-07-15',
    tags: ['Wildlife', 'Safari', 'Adventure'],
    difficulty_level: 'Intermediate',
    total_bookings: 0
  },
  {
    id: '3',
    title: 'Tropical Island Retreat',
    description: 'Unwind in a luxurious tropical paradise, enjoying pristine beaches, water sports, and local culture.',
    location: 'Maldives',
    activity_type: 'Beach Vacation',
    duration_hours: 168,
    max_guests: 15,
    price_per_person: 3200,
    rating: 0,
    total_reviews: 0,
    primary_image_url: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=300&fit=crop',
    status: 'draft',
    created_at: '2024-07-05',
    updated_at: '2024-07-12',
    tags: ['Beach', 'Tropical', 'Luxury'],
    difficulty_level: 'All Levels',
    total_bookings: 0
  }
];

const activityTypes = [
  { value: 'sailing', label: 'Sailing', icon: '‚õµ' },
  { value: 'surfing', label: 'Surfing', icon: 'üèÑ' },
  { value: 'diving', label: 'Diving', icon: 'ü§ø' },
  { value: 'kayaking', label: 'Kayaking', icon: 'üö£' },
  { value: 'fishing', label: 'Fishing', icon: 'üé£' },
  { value: 'yacht_charter', label: 'Yacht Charter', icon: 'üõ•Ô∏è' }
];

const difficultyLevels = [
  { value: 'beginner', label: 'Beginner', description: 'No experience required' },
  { value: 'intermediate', label: 'Intermediate', description: 'Some experience helpful' },
  { value: 'advanced', label: 'Advanced', description: 'Experienced participants only' },
  { value: 'all_levels', label: 'All Levels', description: 'Suitable for everyone' }
];

// Create Adventure Wizard Component
const CreateAdventureWizard: React.FC<{ isOpen: boolean; onClose: () => void; onSuccess: (adventure: Adventure) => void }> = ({ 
  isOpen, 
  onClose, 
  onSuccess 
}) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState<AdventureForm>({
    title: '',
    description: '',
    short_description: '',
    activity_type: '',
    category: [],
    location: '',
    specific_location: '',
    country: '',
    duration_hours: 0,
    duration_display: '',
    max_guests: 1,
    min_guests: 1,
    price_per_person: 0,
    difficulty_level: 'beginner',
    primary_image_url: '',
    additional_images: [],
    included_amenities: [],
    what_to_bring: [],
    min_age: 0,
    max_age: 100,
    age_restriction_details: '',
    weather_contingency: '',
    seasonal_availability: [],
    tags: []
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const totalSteps = 6;
  const steps = [
    { id: 1, title: 'Basic Info', icon: FileText },
    { id: 2, title: 'Location', icon: MapPin },
    { id: 3, title: 'Details', icon: Clock },
    { id: 4, title: 'Media', icon: Camera },
    { id: 5, title: 'Inclusions', icon: Shield },
    { id: 6, title: 'Review', icon: Check }
  ];

  const updateFormData = (field: keyof AdventureForm, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const addToArray = (field: keyof AdventureForm, item: string) => {
    if (item.trim()) {
      const currentArray = formData[field] as string[];
      if (!currentArray.includes(item)) {
        updateFormData(field, [...currentArray, item]);
      }
    }
  };

  const removeFromArray = (field: keyof AdventureForm, index: number) => {
    const currentArray = formData[field] as string[];
    updateFormData(field, currentArray.filter((_, i) => i !== index));
  };

  const validateStep = (step: number): boolean => {
    const newErrors: Record<string, string> = {};

    switch (step) {
      case 1:
        if (!formData.title.trim()) newErrors.title = 'Title is required';
        if (!formData.description.trim()) newErrors.description = 'Description is required';
        if (!formData.activity_type) newErrors.activity_type = 'Activity type is required';
        break;
      case 2:
        if (!formData.location.trim()) newErrors.location = 'Location is required';
        if (!formData.country.trim()) newErrors.country = 'Country is required';
        break;
      case 3:
        if (formData.duration_hours <= 0) newErrors.duration_hours = 'Duration must be greater than 0';
        if (formData.max_guests <= 0) newErrors.max_guests = 'Max guests must be greater than 0';
        if (formData.price_per_person <= 0) newErrors.price_per_person = 'Price must be greater than 0';
        break;
      case 4:
        if (!formData.primary_image_url.trim()) newErrors.primary_image_url = 'Primary image is required';
        break;
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, totalSteps));
    }
  };

  const handlePrevious = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
  };

  const handleSubmit = async () => {
    if (!validateStep(currentStep)) return;

    setIsSubmitting(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Create new adventure object
      const newAdventure: Adventure = {
        id: Math.random().toString(36).substr(2, 9),
        title: formData.title,
        description: formData.description,
        location: `${formData.location}, ${formData.country}`,
        activity_type: formData.activity_type,
        duration_hours: formData.duration_hours,
        max_guests: formData.max_guests,
        price_per_person: formData.price_per_person,
        rating: 0,
        total_reviews: 0,
        primary_image_url: formData.primary_image_url,
        status: 'draft',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        tags: formData.tags,
        difficulty_level: formData.difficulty_level,
        total_bookings: 0
      };

      onSuccess(newAdventure);
      onClose();
      
      // Reset form
      setFormData({
        title: '',
        description: '',
        short_description: '',
        activity_type: '',
        category: [],
        location: '',
        specific_location: '',
        country: '',
        duration_hours: 0,
        duration_display: '',
        max_guests: 1,
        min_guests: 1,
        price_per_person: 0,
        difficulty_level: 'beginner',
        primary_image_url: '',
        additional_images: [],
        included_amenities: [],
        what_to_bring: [],
        min_age: 0,
        max_age: 100,
        age_restriction_details: '',
        weather_contingency: '',
        seasonal_availability: [],
        tags: []
      });
      setCurrentStep(1);
    } catch (error) {
      console.error('Error creating adventure:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Adventure Title *
              </label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => updateFormData('title', e.target.value)}
                placeholder="e.g., Sunset Sailing Adventure in Santorini"
                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                  errors.title ? 'border-red-500' : 'border-gray-300'
                }`}
              />
              {errors.title && <p className="text-red-500 text-sm mt-1">{errors.title}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Activity Type *
              </label>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                {activityTypes.map((type) => (
                  <button
                    key={type.value}
                    type="button"
                    onClick={() => updateFormData('activity_type', type.value)}
                    className={`p-4 border-2 rounded-lg text-left transition-colors ${
                      formData.activity_type === type.value
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="text-2xl mb-2">{type.icon}</div>
                    <div className="font-medium text-gray-900">{type.label}</div>
                  </button>
                ))}
              </div>
              {errors.activity_type && <p className="text-red-500 text-sm mt-1">{errors.activity_type}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Full Description *
              </label>
              <textarea
                value={formData.description}
                onChange={(e) => updateFormData('description', e.target.value)}
                placeholder="Detailed description of the adventure, what guests will experience..."
                rows={5}
                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                  errors.description ? 'border-red-500' : 'border-gray-300'
                }`}
              />
              {errors.description && <p className="text-red-500 text-sm mt-1">{errors.description}</p>}
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Country *
                </label>
                <input
                  type="text"
                  value={formData.country}
                  onChange={(e) => updateFormData('country', e.target.value)}
                  placeholder="e.g., Greece"
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    errors.country ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.country && <p className="text-red-500 text-sm mt-1">{errors.country}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  City/Location *
                </label>
                <input
                  type="text"
                  value={formData.location}
                  onChange={(e) => updateFormData('location', e.target.value)}
                  placeholder="e.g., Santorini"
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    errors.location ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.location && <p className="text-red-500 text-sm mt-1">{errors.location}</p>}
              </div>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Duration (Hours) *
                </label>
                <input
                  type="number"
                  value={formData.duration_hours}
                  onChange={(e) => updateFormData('duration_hours', parseFloat(e.target.value) || 0)}
                  min="0.5"
                  step="0.5"
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    errors.duration_hours ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.duration_hours && <p className="text-red-500 text-sm mt-1">{errors.duration_hours}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Maximum Guests *
                </label>
                <input
                  type="number"
                  value={formData.max_guests}
                  onChange={(e) => updateFormData('max_guests', parseInt(e.target.value) || 0)}
                  min="1"
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    errors.max_guests ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.max_guests && <p className="text-red-500 text-sm mt-1">{errors.max_guests}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Price per Person *
                </label>
                <div className="relative">
                  <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                  <input
                    type="number"
                    value={formData.price_per_person}
                    onChange={(e) => updateFormData('price_per_person', parseFloat(e.target.value) || 0)}
                    min="0"
                    step="0.01"
                    className={`w-full pl-10 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.price_per_person ? 'border-red-500' : 'border-gray-300'
                    }`}
                  />
                </div>
                {errors.price_per_person && <p className="text-red-500 text-sm mt-1">{errors.price_per_person}</p>}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Difficulty Level
              </label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {difficultyLevels.map((level) => (
                  <button
                    key={level.value}
                    type="button"
                    onClick={() => updateFormData('difficulty_level', level.value)}
                    className={`p-4 border-2 rounded-lg text-left transition-colors ${
                      formData.difficulty_level === level.value
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="font-medium text-gray-900">{level.label}</div>
                    <div className="text-sm text-gray-500">{level.description}</div>
                  </button>
                ))}
              </div>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Primary Image *
              </label>
              <div className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                errors.primary_image_url ? 'border-red-300' : 'border-gray-300 hover:border-gray-400'
              }`}>
                {formData.primary_image_url ? (
                  <div className="relative">
                    <img
                      src={formData.primary_image_url}
                      alt="Primary"
                      className="w-full h-48 object-cover rounded-lg"
                    />
                    <button
                      type="button"
                      onClick={() => updateFormData('primary_image_url', '')}
                      className="absolute top-2 right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </div>
                ) : (
                  <div>
                    <Upload className="mx-auto h-12 w-12 text-gray-400" />
                    <div className="mt-4">
                      <input
                        type="url"
                        value={formData.primary_image_url}
                        onChange={(e) => updateFormData('primary_image_url', e.target.value)}
                        placeholder="Enter image URL"
                        className="w-full max-w-md px-4 py-2 border border-gray-300 rounded-lg"
                      />
                      <p className="text-sm text-gray-500 mt-2">
                        Upload your best photo that represents this adventure
                      </p>
                    </div>
                  </div>
                )}
              </div>
              {errors.primary_image_url && <p className="text-red-500 text-sm mt-1">{errors.primary_image_url}</p>}
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                What's Included
              </label>
              <div className="space-y-2">
                {formData.included_amenities.map((item, index) => (
                  <div key={index} className="flex items-center justify-between bg-green-50 px-3 py-2 rounded-lg">
                    <span className="text-green-800">{item}</span>
                    <button
                      type="button"
                      onClick={() => removeFromArray('included_amenities', index)}
                      className="text-red-500 hover:text-red-700"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                ))}
                <div className="flex">
                  <input
                    type="text"
                    placeholder="Add included item (e.g., Equipment, Guide, Refreshments)"
                    className="flex-1 px-4 py-2 border border-gray-300 rounded-l-lg"
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        const input = e.target as HTMLInputElement;
                        if (input.value.trim()) {
                          addToArray('included_amenities', input.value.trim());
                          input.value = '';
                        }
                      }
                    }}
                  />
                  <button
                    type="button"
                    className="px-4 py-2 bg-green-500 text-white rounded-r-lg hover:bg-green-600"
                    onClick={(e) => {
                      const input = (e.target as HTMLButtonElement).previousElementSibling as HTMLInputElement;
                      if (input.value.trim()) {
                        addToArray('included_amenities', input.value.trim());
                        input.value = '';
                      }
                    }}
                  >
                    <Plus className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Tags
              </label>
              <div className="flex flex-wrap gap-2 mb-2">
                {formData.tags.map((tag, index) => (
                  <span key={index} className="inline-flex items-center px-3 py-1 bg-gray-100 text-gray-800 rounded-full text-sm">
                    {tag}
                    <button
                      type="button"
                      onClick={() => removeFromArray('tags', index)}
                      className="ml-2 text-gray-500 hover:text-red-500"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </span>
                ))}
              </div>
              <input
                type="text"
                placeholder="Add tags (press Enter)"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg"
                onKeyPress={(e) => {
                  if (e.key === 'Enter') {
                    const input = e.target as HTMLInputElement;
                    if (input.value.trim()) {
                      addToArray('tags', input.value.trim());
                      input.value = '';
                    }
                  }
                }}
              />
            </div>
          </div>
        );

      case 6:
        return (
          <div className="space-y-8">
            <div className="text-center">
              <h3 className="text-2xl font-bold text-gray-900 mb-2">Review Your Adventure</h3>
              <p className="text-gray-600">Double-check everything before publishing</p>
            </div>

            <div className="bg-gray-50 rounded-lg p-6 space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <img
                    src={formData.primary_image_url || 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400&h=300&fit=crop'}
                    alt={formData.title}
                    className="w-full h-48 object-cover rounded-lg"
                  />
                </div>
                <div className="space-y-4">
                  <div>
                    <h4 className="text-xl font-bold text-gray-900">{formData.title || 'Untitled Adventure'}</h4>
                    <p className="text-gray-600 flex items-center">
                      <MapPin className="w-4 h-4 mr-1" />
                      {formData.location}, {formData.country}
                    </p>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-500">Activity:</span>
                      <div className="font-medium">{formData.activity_type || 'Not specified'}</div>
                    </div>
                    <div>
                      <span className="text-gray-500">Duration:</span>
                      <div className="font-medium">{formData.duration_hours}h</div>
                    </div>
                    <div>
                      <span className="text-gray-500">Max Guests:</span>
                      <div className="font-medium">{formData.max_guests}</div>
                    </div>