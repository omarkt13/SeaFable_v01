"use client";

import React, { useState, useEffect } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import {
  Search,
  Filter,
  Calendar,
  Phone,
  Mail,
  MessageCircle,
  Edit2,
  ChevronLeft,
  ChevronRight,
  ChevronDown,
  MoreHorizontal,
  Download,
  RefreshCw,
  MapPin,
  Clock,
  Users,
  DollarSign
} from 'lucide-react';

// Types based on SeaFable database structure
interface Booking {
  id: string;
  user_id: string;
  experience_id: string;
  host_id: string;
  booking_date: string;
  departure_time: string;
  number_of_guests: number;
  total_price: number;
  booking_status: 'pending' | 'confirmed' | 'cancelled_user' | 'cancelled_host' | 'completed' | 'rescheduled';
  special_requests?: string;
  booked_at: string;
  payment_status: 'pending' | 'succeeded' | 'failed' | 'refunded';
  // Relations
  experiences?: {
    title: string;
    duration_hours: number;
    max_guests: number;
    location: string;
    primary_image_url?: string;
  };
  users?: {
    first_name: string;
    last_name: string;
    email: string;
  };
}

interface BookingFilters {
  search: string;
  status: string;
  dateRange: {
    start: string;
    end: string;
  };
  activityType: string;
}

interface PaginationInfo {
  currentPage: number;
  totalPages: number;
  totalBookings: number;
  bookingsPerPage: number;
}

const BookingsPage = () => {
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [hostProfile, setHostProfile] = useState<any>(null);
  
  // Filters and search
  const [filters, setFilters] = useState<BookingFilters>({
    search: '',
    status: 'all',
    dateRange: {
      start: '',
      end: ''
    },
    activityType: 'all'
  });

  // Pagination
  const [pagination, setPagination] = useState<PaginationInfo>({
    currentPage: 1,
    totalPages: 1,
    totalBookings: 0,
    bookingsPerPage: 10
  });

  // UI State
  const [selectedBookings, setSelectedBookings] = useState<Set<string>>(new Set());
  const [showFilters, setShowFilters] = useState(false);

  const supabase = createClientComponentClient();

  useEffect(() => {
    getCurrentHost();
  }, []);

  useEffect(() => {
    if (hostProfile) {
      fetchBookings();
    }
  }, [hostProfile, pagination.currentPage, filters]);

  const getCurrentHost = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      const { data: profile, error } = await supabase
        .from('host_profiles')
        .select('*')
        .eq('id', user.id)
        .single();

      if (error) {
        console.error('Error fetching host profile:', error);
        return;
      }

      setHostProfile(profile);
    } catch (error) {
      console.error('Error getting current host:', error);
    }
  };

  const fetchBookings = async () => {
    if (!hostProfile) return;
    
    setLoading(true);
    try {
      let query = supabase
        .from('bookings')
        .select(`
          *,
          experiences (
            title,
            duration_hours,
            max_guests,
            location,
            primary_image_url,
            activity_type
          ),
          users (
            first_name,
            last_name,
            email
          )
        `, { count: 'exact' })
        .eq('host_id', hostProfile.id);

      // Apply filters
      if (filters.status !== 'all') {
        query = query.eq('booking_status', filters.status);
      }

      if (filters.search) {
        // Search across multiple fields using OR condition
        query = query.or(`experiences.title.ilike.%${filters.search}%,users.first_name.ilike.%${filters.search}%,users.last_name.ilike.%${filters.search}%,users.email.ilike.%${filters.search}%`);
      }

      if (filters.dateRange.start && filters.dateRange.end) {
        query = query
          .gte('booking_date', filters.dateRange.start)
          .lte('booking_date', filters.dateRange.end);
      }

      // Pagination
      const startIndex = (pagination.currentPage - 1) * pagination.bookingsPerPage;
      query = query
        .order('booked_at', { ascending: false })
        .range(startIndex, startIndex + pagination.bookingsPerPage - 1);

      const { data, count, error } = await query;

      if (error) throw error;

      setBookings(data || []);
      setPagination(prev => ({
        ...prev,
        totalBookings: count || 0,
        totalPages: Math.ceil((count || 0) / prev.bookingsPerPage)
      }));
    } catch (error) {
      console.error('Error fetching bookings:', error);
    } finally {
      setLoading(false);
    }
  };

  const refreshBookings = async () => {
    setRefreshing(true);
    await fetchBookings();
    setRefreshing(false);
  };

  const handleStatusChange = async (bookingId: string, newStatus: string) => {
    try {
      const { error } = await supabase
        .from('bookings')
        .update({ 
          booking_status: newStatus,
          updated_at: new Date().toISOString()
        })
        .eq('id', bookingId);

      if (error) throw error;

      // Refresh bookings to reflect changes
      await fetchBookings();
    } catch (error) {
      console.error('Error updating booking status:', error);
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'EUR',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: '2-digit',
      day: '2-digit',
      year: 'numeric'
    });
  };

  const formatTime = (timeString: string) => {
    if (!timeString) return 'TBD';
    return timeString.slice(0, 5); // HH:MM format
  };

  const getClientName = (booking: Booking) => {
    if (booking.users) {
      return `${booking.users.first_name} ${booking.users.last_name}`;
    }
    return 'Unknown Client';
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'confirmed':
        return 'bg-green-100 text-green-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'completed':
        return 'bg-blue-100 text-blue-800';
      case 'cancelled_user':
      case 'cancelled_host':
        return 'bg-red-100 text-red-800';
      case 'rescheduled':
        return 'bg-purple-100 text-purple-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusDisplayName = (status: string) => {
    switch (status) {
      case 'cancelled_user':
        return 'Cancelled';
      case 'cancelled_host':
        return 'Cancelled';
      default:
        return status.charAt(0).toUpperCase() + status.slice(1);
    }
  };

  const generateBookingReference = (booking: Booking) => {
    // Generate a reference like REF-001, REF-002, etc.
    const bookingNumber = bookings.findIndex(b => b.id === booking.id) + 1 + ((pagination.currentPage - 1) * pagination.bookingsPerPage);
    return `REF-${bookingNumber.toString().padStart(3, '0')}`;
  };

  const handleSelectBooking = (bookingId: string) => {
    const newSelected = new Set(selectedBookings);
    if (newSelected.has(bookingId)) {
      newSelected.delete(bookingId);
    } else {
      newSelected.add(bookingId);
    }
    setSelectedBookings(newSelected);
  };

  const handleSelectAll = () => {
    if (selectedBookings.size === bookings.length) {
      setSelectedBookings(new Set());
    } else {
      setSelectedBookings(new Set(bookings.map(b => b.id)));
    }
  };

  const totalSales = bookings.reduce((sum, booking) => sum + booking.total_price, 0);
  const spotsLeft = bookings.reduce((total, booking) => {
    const maxGuests = booking.experiences?.max_guests || 0;
    const booked = booking.number_of_guests;
    return total + Math.max(0, maxGuests - booked);
  }, 0);

  const Skeleton = ({ className }: { className?: string }) => (
    <div className={`animate-pulse bg-gray-200 rounded ${className}`} />
  );

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-8 py-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Bookings Overview</h1>
            <p className="text-gray-600 mt-1">Manage your customer bookings and reservations</p>
          </div>
          <div className="flex items-center gap-3">
            <button
              onClick={refreshBookings}
              disabled={refreshing}
              className="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50"
            >
              <RefreshCw className={`w-4 h-4 ${refreshing ? 'animate-spin' : ''}`} />
              Refresh
            </button>
            <button className="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">
              <Download className="w-4 h-4" />
              Export
            </button>
          </div>
        </div>
      </div>

      {/* Filters Bar */}
      <div className="bg-white border-b border-gray-200 px-8 py-4">
        <div className="flex items-center gap-4">
          {/* Search */}
          <div className="relative flex-1 max-w-md">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              placeholder="Search..."
              value={filters.search}
              onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* Date Range */}
          <div className="relative">
            <button className="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">
              <Calendar className="w-4 h-4" />
              Select Date Range
              <ChevronDown className="w-4 h-4" />
            </button>
          </div>

          {/* Activity Filter */}
          <div className="relative">
            <select
              value={filters.activityType}
              onChange={(e) => setFilters(prev => ({ ...prev, activityType: e.target.value }))}
              className="appearance-none pl-4 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
            >
              <option value="all">Filter by Activity</option>
              <option value="sailing">Sailing</option>
              <option value="surfing">Surfing</option>
              <option value="kayaking">Kayaking</option>
              <option value="diving">Diving</option>
              <option value="fishing">Fishing</option>
            </select>
            <ChevronDown className="absolute right-2 top-1/2 transform -translate-y-1/2 w-4 h-4 pointer-events-none" />
          </div>

          {/* Status Filter */}
          <div className="relative">
            <select
              value={filters.status}
              onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
              className="appearance-none pl-4 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
            >
              <option value="all">All Status</option>
              <option value="pending">Pending</option>
              <option value="confirmed">Confirmed</option>
              <option value="completed">Completed</option>
              <option value="cancelled_user">Cancelled</option>
            </select>
            <ChevronDown className="absolute right-2 top-1/2 transform -translate-y-1/2 w-4 h-4 pointer-events-none" />
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 overflow-hidden">
        <div className="h-full flex flex-col">
          {/* Bookings Table */}
          <div className="flex-1 overflow-auto">
            <div className="bg-white border border-gray-200 rounded-lg m-8 shadow-sm">
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-50 border-b border-gray-200">
                    <tr>
                      <th className="px-6 py-4 text-left">
                        <input
                          type="checkbox"
                          checked={selectedBookings.size === bookings.length && bookings.length > 0}
                          onChange={handleSelectAll}
                          className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        />
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                        Tour
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                        Client
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                        Booking Reference
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                        Date & Time
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                        Booked On
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                        Guests
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                        Spots Left
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                        Contact Info
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                        Sales
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                        Status
                      </th>
                      <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {loading ? (
                      Array.from({ length: 5 }).map((_, i) => (
                        <tr key={i}>
                          <td className="px-6 py-4">
                            <Skeleton className="w-4 h-4" />
                          </td>
                          <td className="px-6 py-4">
                            <div className="flex items-center gap-3">
                              <Skeleton className="w-12 h-12 rounded-lg" />
                              <div>
                                <Skeleton className="w-32 h-4 mb-1" />
                                <Skeleton className="w-24 h-3" />
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4">
                            <Skeleton className="w-24 h-4" />
                          </td>
                          <td className="px-6 py-4">
                            <Skeleton className="w-16 h-4" />
                          </td>
                          <td className="px-6 py-4">
                            <Skeleton className="w-20 h-4 mb-1" />
                            <Skeleton className="w-16 h-3" />
                          </td>
                          <td className="px-6 py-4">
                            <Skeleton className="w-20 h-4" />
                          </td>
                          <td className="px-6 py-4">
                            <Skeleton className="w-8 h-4" />
                          </td>
                          <td className="px-6 py-4">
                            <Skeleton className="w-8 h-4" />
                          </td>
                          <td className="px-6 py-4">
                            <Skeleton className="w-32 h-4 mb-1" />
                            <Skeleton className="w-28 h-3" />
                          </td>
                          <td className="px-6 py-4">
                            <Skeleton className="w-16 h-4" />
                          </td>
                          <td className="px-6 py-4">
                            <Skeleton className="w-20 h-6 rounded-full" />
                          </td>
                          <td className="px-6 py-4">
                            <div className="flex gap-2">
                              <Skeleton className="w-8 h-8 rounded" />
                              <Skeleton className="w-8 h-8 rounded" />
                            </div>
                          </td>
                        </tr>
                      ))
                    ) : bookings.length > 0 ? (
                      bookings.map((booking) => {
                        const maxGuests = booking.experiences?.max_guests || 0;
                        const spotsLeft = Math.max(0, maxGuests - booking.number_of_guests);
                        
                        return (
                          <tr key={booking.id} className="hover:bg-gray-50">
                            <td className="px-6 py-4">
                              <input
                                type="checkbox"
                                checked={selectedBookings.has(booking.id)}
                                onChange={() => handleSelectBooking(booking.id)}
                                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                              />
                            </td>
                            <td className="px-6 py-4">
                              <div className="flex items-center gap-3">
                                <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-teal-500 rounded-lg flex-shrink-0"></div>
                                <div>
                                  <div className="font-medium text-gray-900">{booking.experiences?.title || 'Unknown Experience'}</div>
                                  <div className="text-sm text-gray-500">
                                    <MapPin className="inline w-3 h-3 mr-1" />
                                    {booking.experiences?.location || 'Location TBD'}
                                  </div>
                                </div>
                              </div>
                            </td>
                            <td className="px-6 py-4">
                              <div className="font-medium text-gray-900">{getClientName(booking)}</div>
                            </td>
                            <td className="px-6 py-4">
                              <div className="text-gray-900">{generateBookingReference(booking)}</div>
                            </td>
                            <td className="px-6 py-4">
                              <div className="text-gray-900">{formatDate(booking.booking_date)}</div>
                              <div className="text-sm text-gray-500">{formatTime(booking.departure_time)}</div>
                            </td>
                            <td className="px-6 py-4">
                              <div className="text-gray-900">{formatDate(booking.booked_at)}</div>
                            </td>
                            <td className="px-6 py-4">
                              <div className="text-gray-900">{booking.number_of_guests}</div>
                            </td>
                            <td className="px-6 py-4">
                              <div className="text-gray-900">{spotsLeft}/{maxGuests}</div>
                            </td>
                            <td className="px-6 py-4">
                              <div className="space-y-1">
                                <div className="flex items-center text-sm text-gray-600">
                                  <Phone className="w-3 h-3 mr-1" />
                                  +1 (555) 123-4567
                                </div>
                                <div className="flex items-center text-sm text-gray-600">
                                  <Mail className="w-3 h-3 mr-1" />
                                  {booking.users?.email || 'No email'}
                                </div>
                              </div>
                            </td>
                            <td className="px-6 py-4">
                              <div className="font-medium text-green-600">
                                {formatCurrency(booking.total_price)}
                              </div>
                            </td>
                            <td className="px-6 py-4">
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(booking.booking_status)}`}>
                                {getStatusDisplayName(booking.booking_status)}
                              </span>
                            </td>
                            <td className="px-6 py-4">
                              <div className="flex items-center gap-2">
                                <button className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded">
                                  <MessageCircle className="w-4 h-4" />
                                </button>
                                <button className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded">
                                  <Edit2 className="w-4 h-4" />
                                </button>
                              </div>
                            </td>
                          </tr>
                        );
                      })
                    ) : (
                      <tr>
                        <td colSpan={12} className="px-6 py-12 text-center">
                          <div className="flex flex-col items-center">
                            <Calendar className="w-12 h-12 text-gray-400 mb-4" />
                            <h3 className="text-lg font-medium text-gray-900 mb-2">No bookings found</h3>
                            <p className="text-gray-500">When customers make bookings, they'll appear here.</p>
                          </div>
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          {/* Footer with Summary and Pagination */}
          <div className="bg-white border-t border-gray-200 px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-8 text-sm text-gray-600">
                <span>Total Bookings: <strong>{pagination.totalBookings}</strong></span>
                <span>Total Sales: <strong className="text-green-600">{formatCurrency(totalSales)}</strong></span>
              </div>
              
              {/* Pagination */}
              <div className="flex items-center gap-2">
                <button
                  onClick={() => setPagination(prev => ({ ...prev, currentPage: Math.max(1, prev.currentPage - 1) }))}
                  disabled={pagination.currentPage === 1}
                  className="p-2 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronLeft className="w-4 h-4" />
                </button>
                
                <span className="px-4 py-2 text-sm text-gray-700">
                  {pagination.currentPage} of {pagination.totalPages}
                </span>
                
                <button
                  onClick={() => setPagination(prev => ({ ...prev, currentPage: Math.min(prev.totalPages, prev.currentPage + 1) }))}
                  disabled={pagination.currentPage === pagination.totalPages}
                  className="p-2 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronRight className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BookingsPage;