"use client";

import React, { useState, useEffect } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import {
  Anchor,
  Home,
  Users,
  MessageCircle,
  Calendar,
  Handshake,
  DollarSign,
  Shapes,
  Settings,
  Bell,
  ChevronDown,
  CheckCircle,
  Shield,
  CreditCard,
  Plus,
  Cloud,
  ChevronLeft,
  ChevronRight,
  Edit2,
  Eye,
  User,
  LogOut,
  Search,
  Loader2
} from 'lucide-react';

// shadcn/ui components
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Skeleton } from "@/components/ui/skeleton";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Separator } from "@/components/ui/separator";

// Types
interface Booking {
  id: string;
  title: string;
  client_name: string;
  date: string;
  time: string;
  duration: number;
  group_size: number;
  max_group_size: number;
  total_sales: number;
  status: 'confirmed' | 'pending' | 'cancelled';
  created_at: string;
}

interface Stats {
  revenue: number;
  active_bookings: number;
  total_clients: number;
  total_experiences: number;
}

interface WeeklyBookings {
  [key: string]: Booking[];
}

const BusinessDashboard = () => {
  const [stats, setStats] = useState<Stats>({
    revenue: 0,
    active_bookings: 0,
    total_clients: 0,
    total_experiences: 0
  });
  const [recentBookings, setRecentBookings] = useState<Booking[]>([]);
  const [weeklyBookings, setWeeklyBookings] = useState<WeeklyBookings>({});
  const [loading, setLoading] = useState(true);
  const [currentWeekStart, setCurrentWeekStart] = useState(new Date());
  const [currentWeekDisplay, setCurrentWeekDisplay] = useState('');
  const [searchQuery, setSearchQuery] = useState('');

  const supabase = createClientComponentClient();

  // Initialize current week to start of this week (Monday)
  useEffect(() => {
    const today = new Date();
    const dayOfWeek = today.getDay();
    const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // If Sunday, go back 6 days, otherwise go to Monday
    const monday = new Date(today);
    monday.setDate(today.getDate() + mondayOffset);
    monday.setHours(0, 0, 0, 0);
    
    setCurrentWeekStart(monday);
  }, []);

  // Initialize current week display
  useEffect(() => {
    if (currentWeekStart.getTime() !== new Date(0).getTime()) { // Don't update on initial empty date
      updateWeekDisplay(currentWeekStart);
    }
  }, [currentWeekStart]);

  const updateWeekDisplay = (startDate: Date) => {
    const endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);
    
    const formatDate = (date: Date) => {
      return date.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric'
      });
    };
    
    setCurrentWeekDisplay(`${formatDate(startDate)} - ${formatDate(endDate)}`);
  };

  const navigateWeek = (direction: 'prev' | 'next') => {
    const newDate = new Date(currentWeekStart);
    newDate.setDate(currentWeekStart.getDate() + (direction === 'next' ? 7 : -7));
    setCurrentWeekStart(newDate);
    
    // Fetch new week's data
    fetchWeeklyBookings(newDate);
  };

  // Fetch dashboard data
  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        fetchStats(),
        fetchRecentBookings(),
        fetchWeeklyBookings(currentWeekStart)
      ]);
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      // Revenue for current month
      const { data: revenueData } = await supabase
        .from('bookings')
        .select('total_sales')
        .gte('created_at', new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString());

      // Active bookings count
      const { data: activeBookingsData, count: activeBookingsCount } = await supabase
        .from('bookings')
        .select('*', { count: 'exact', head: true })
        .eq('status', 'confirmed')
        .gte('date', new Date().toISOString());

      // Total clients count
      const { data: clientsData, count: clientsCount } = await supabase
        .from('clients')
        .select('*', { count: 'exact', head: true });

      // Total experiences count
      const { data: experiencesData, count: experiencesCount } = await supabase
        .from('experiences')
        .select('*', { count: 'exact', head: true });

      const totalRevenue = revenueData?.reduce((sum, booking) => sum + (booking.total_sales || 0), 0) || 0;

      setStats({
        revenue: totalRevenue,
        active_bookings: activeBookingsCount || 0,
        total_clients: clientsCount || 0,
        total_experiences: experiencesCount || 0
      });
    } catch (error) {
      console.error('Error fetching stats:', error);
    }
  };

  const fetchRecentBookings = async () => {
    try {
      const { data, error } = await supabase
        .from('bookings')
        .select(`
          *,
          clients (
            name
          )
        `)
        .order('created_at', { ascending: false })
        .limit(3);

      if (error) throw error;

      const bookingsWithClientNames = data?.map(booking => ({
        ...booking,
        client_name: booking.clients?.name || 'Unknown Client'
      })) || [];

      setRecentBookings(bookingsWithClientNames);
    } catch (error) {
      console.error('Error fetching recent bookings:', error);
    }
  };

  const fetchWeeklyBookings = async (startDate: Date = currentWeekStart) => {
    try {
      // Calculate week boundaries
      const weekStart = new Date(startDate);
      weekStart.setHours(0, 0, 0, 0);
      
      const weekEnd = new Date(startDate);
      weekEnd.setDate(startDate.getDate() + 6);
      weekEnd.setHours(23, 59, 59, 999);

      const { data, error } = await supabase
        .from('bookings')
        .select(`
          *,
          clients (
            name
          ),
          experiences (
            title
          )
        `)
        .gte('date', weekStart.toISOString().split('T')[0])
        .lte('date', weekEnd.toISOString().split('T')[0])
        .order('date', { ascending: true })
        .order('time', { ascending: true });

      if (error) throw error;

      // Group bookings by day of week
      const groupedBookings: WeeklyBookings = {
        Monday: [],
        Tuesday: [],
        Wednesday: [],
        Thursday: [],
        Friday: [],
        Saturday: [],
        Sunday: []
      };

      data?.forEach(booking => {
        const bookingDate = new Date(booking.date);
        const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        const dayName = dayNames[bookingDate.getDay()];
        
        if (groupedBookings[dayName]) {
          const bookingWithNames = {
            ...booking,
            title: booking.experiences?.title || booking.title || 'Untitled Experience',
            client_name: booking.clients?.name || 'Unknown Client'
          };
          groupedBookings[dayName].push(bookingWithNames);
        }
      });

      setWeeklyBookings(groupedBookings);
    } catch (error) {
      console.error('Error fetching weekly bookings:', error);
      // Set empty state on error
      setWeeklyBookings({
        Monday: [],
        Tuesday: [],
        Wednesday: [],
        Thursday: [],
        Friday: [],
        Saturday: [],
        Sunday: []
      });
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  const EmptyState = ({ icon: Icon, title, description }: { icon: any, title: string, description: string }) => (
    <div className="flex flex-col items-center justify-center py-12 px-4 text-center">
      <Icon className="h-12 w-12 text-muted-foreground mb-4" />
      <h3 className="text-lg font-semibold mb-2">{title}</h3>
      <p className="text-sm text-muted-foreground max-w-sm">{description}</p>
    </div>
  );

  const renderWeeklyBookings = () => {
    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
    
    return (
      <div className="flex gap-4 overflow-x-auto pb-4">
        {days.map(day => (
          <Card key={day} className="flex-shrink-0 w-80">
            <CardHeader className="pb-3">
              <CardTitle className="text-lg">{day}</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {loading ? (
                <div className="space-y-3">
                  <Skeleton className="h-24 w-full" />
                  <Skeleton className="h-24 w-full" />
                </div>
              ) : weeklyBookings[day]?.length > 0 ? (
                weeklyBookings[day].map(booking => (
                  <Card key={booking.id} className="p-3">
                    <div className="space-y-2">
                      <h5 className="font-semibold text-sm line-clamp-1">{booking.title}</h5>
                      <div className="space-y-1 text-xs text-muted-foreground">
                        <p>{formatDate(booking.date)} - {booking.time || 'Time TBD'}</p>
                        <p>Duration: {booking.duration || 0} hours</p>
                        <p>Group size: {booking.group_size || 0}/{booking.max_group_size || 0}</p>
                        <p>Total sales: {formatCurrency(booking.total_sales || 0)}</p>
                      </div>
                      <div className="flex gap-2 pt-2">
                        <Button size="sm" variant="outline" className="h-7 text-xs flex-1">
                          <MessageCircle className="h-3 w-3 mr-1" />
                          Message
                        </Button>
                        <Button size="sm" variant="outline" className="h-7 text-xs flex-1">
                          <Edit2 className="h-3 w-3 mr-1" />
                          Edit
                        </Button>
                      </div>
                    </div>
                  </Card>
                ))
              ) : (
                <div className="text-center py-8 text-muted-foreground text-sm">
                  <Calendar className="h-8 w-8 mx-auto mb-2 opacity-50" />
                  <p>No bookings</p>
                  <p className="text-xs">for {day}</p>
                </div>
              )}
            </CardContent>
          </Card>
        ))}
      </div>
    );
  };

  const getSidebarItems = () => [
    { icon: Users, label: 'Bookings', href: '/bookings' },
    { icon: Anchor, label: 'Experiences', href: '/experiences' },
    { icon: MessageCircle, label: 'Messages', href: '/messages' },
    { icon: Calendar, label: 'Calendar', href: '/calendar' },
    { icon: Handshake, label: 'Clients', href: '/clients' }
  ];

  const getFinanceItems = () => [
    { icon: DollarSign, label: 'Sales & Payments', href: '/sales' },
    { icon: Shapes, label: 'Integrations', href: '/integrations' }
  ];

  const getWorkspaceItems = () => [
    { icon: User, label: 'Account', href: '/account' },
    { icon: Settings, label: 'Settings', href: '/settings' }
  ];

  return (
    <div className="flex h-screen bg-background">
      {/* Sidebar */}
      <div className="w-64 border-r bg-card">
        <div className="p-6">
          <div className="flex items-center gap-2">
            <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-orange-100">
              <Anchor className="h-6 w-6 text-orange-600" />
            </div>
            <h1 className="text-xl font-semibold">Business Dashboard</h1>
          </div>
        </div>

        <nav className="flex-1 px-6 space-y-8">
          <div className="space-y-1">
            <Button variant="secondary" className="w-full justify-start gap-3">
              <Home className="h-5 w-5" />
              Home
            </Button>
          </div>

          <div className="space-y-3">
            <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
              Client Management
            </h3>
            <div className="space-y-1">
              {getSidebarItems().map(({ icon: Icon, label, href }) => (
                <Button key={label} variant="ghost" className="w-full justify-start gap-3">
                  <Icon className="h-5 w-5" />
                  {label}
                </Button>
              ))}
            </div>
          </div>

          <div className="space-y-3">
            <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
              Finance
            </h3>
            <div className="space-y-1">
              {getFinanceItems().map(({ icon: Icon, label, href }) => (
                <Button key={label} variant="ghost" className="w-full justify-start gap-3">
                  <Icon className="h-5 w-5" />
                  {label}
                </Button>
              ))}
            </div>
          </div>

          <div className="space-y-3">
            <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
              Workspace
            </h3>
            <div className="space-y-1">
              {getWorkspaceItems().map(({ icon: Icon, label, href }) => (
                <Button key={label} variant="ghost" className="w-full justify-start gap-3">
                  <Icon className="h-5 w-5" />
                  {label}
                </Button>
              ))}
            </div>
          </div>
        </nav>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Header */}
        <header className="border-b bg-card px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
              <Input
                type="text"
                placeholder="Search..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-9 w-64"
              />
            </div>
            <div className="flex items-center gap-4">
              <Button variant="ghost" size="icon">
                <Bell className="h-5 w-5" />
              </Button>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" className="gap-2">
                    Ocean Travel
                    <ChevronDown className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuLabel>My Account</DropdownMenuLabel>
                  <DropdownMenuItem>
                    <User className="mr-2 h-4 w-4" />
                    Profile
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <Settings className="mr-2 h-4 w-4" />
                    Settings
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem>
                    <LogOut className="mr-2 h-4 w-4" />
                    Logout
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </header>

        {/* Main Content Area */}
        <main className="flex-1 overflow-y-auto">
          {/* Welcome Banner */}
          <div className="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-8 m-4 rounded-lg">
            <div className="flex flex-col gap-4">
              <h2 className="text-2xl font-bold">Good Morning! 🌊</h2>
              <p className="text-lg opacity-90">
                You have {loading ? '...' : stats.active_bookings} bookings today. Weather conditions are perfect for water adventures!
              </p>
              <div className="flex items-center gap-6">
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-5 w-5" />
                  <span>Profile Complete</span>
                </div>
                <div className="flex items-center gap-2">
                  <Shield className="h-5 w-5" />
                  <span>Verified Business</span>
                </div>
              </div>
            </div>
          </div>

          <div className="p-8 space-y-8">
            {/* Monthly Stats */}
            <section>
              <h3 className="text-2xl font-semibold mb-6">Monthly Stats</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {loading ? (
                  Array.from({ length: 4 }).map((_, i) => (
                    <Card key={i}>
                      <CardContent className="p-6">
                        <Skeleton className="h-12 w-12 rounded-lg mb-4" />
                        <Skeleton className="h-8 w-20 mb-2" />
                        <Skeleton className="h-4 w-16" />
                      </CardContent>
                    </Card>
                  ))
                ) : (
                  <>
                    <Card>
                      <CardContent className="p-6">
                        <div className="flex h-12 w-12 items-center justify-center rounded-lg bg-blue-100 mb-4">
                          <CreditCard className="h-6 w-6 text-blue-600" />
                        </div>
                        <div className="text-3xl font-bold">{formatCurrency(stats.revenue)}</div>
                        <p className="text-muted-foreground">Revenue</p>
                      </CardContent>
                    </Card>
                    <Card>
                      <CardContent className="p-6">
                        <div className="flex h-12 w-12 items-center justify-center rounded-lg bg-green-100 mb-4">
                          <Calendar className="h-6 w-6 text-green-600" />
                        </div>
                        <div className="text-3xl font-bold">{stats.active_bookings}</div>
                        <p className="text-muted-foreground">Active Bookings</p>
                      </CardContent>
                    </Card>
                    <Card>
                      <CardContent className="p-6">
                        <div className="flex h-12 w-12 items-center justify-center rounded-lg bg-purple-100 mb-4">
                          <Users className="h-6 w-6 text-purple-600" />
                        </div>
                        <div className="text-3xl font-bold">{stats.total_clients}</div>
                        <p className="text-muted-foreground">Total Clients</p>
                      </CardContent>
                    </Card>
                    <Card>
                      <CardContent className="p-6">
                        <div className="flex h-12 w-12 items-center justify-center rounded-lg bg-green-100 mb-4">
                          <Anchor className="h-6 w-6 text-green-600" />
                        </div>
                        <div className="text-3xl font-bold">{stats.total_experiences}</div>
                        <p className="text-muted-foreground">Total Experiences</p>
                      </CardContent>
                    </Card>
                  </>
                )}
              </div>
            </section>

            {/* Quick Actions */}
            <section>
              <h3 className="text-2xl font-semibold mb-6">Quick Actions</h3>
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
                {[
                  { icon: Plus, label: 'Add Experiences' },
                  { icon: MessageCircle, label: 'Messages' },
                  { icon: Calendar, label: 'Calendar' },
                  { icon: Cloud, label: 'Check Weather' }
                ].map(({ icon: Icon, label }) => (
                  <Card key={label} className="cursor-pointer hover:shadow-md transition-shadow">
                    <CardContent className="p-6 text-center">
                      <div className="flex h-12 w-12 items-center justify-center rounded-lg bg-muted mx-auto mb-3">
                        <Icon className="h-6 w-6" />
                      </div>
                      <div className="font-medium">{label}</div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </section>

            {/* This Week's Bookings */}
            <section>
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-2xl font-semibold">This Week's Bookings</h3>
                <div className="flex items-center gap-2">
                  <Button 
                    variant="outline" 
                    size="icon"
                    onClick={() => navigateWeek('prev')}
                    disabled={loading}
                  >
                    <ChevronLeft className="h-4 w-4" />
                  </Button>
                  <span className="font-medium min-w-[120px] text-center">{currentWeekDisplay || 'Loading...'}</span>
                  <Button 
                    variant="outline" 
                    size="icon"
                    onClick={() => navigateWeek('next')}
                    disabled={loading}
                  >
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              {renderWeeklyBookings()}
            </section>

            {/* Recent Bookings */}
            <section>
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-2xl font-semibold">Recent Bookings</h3>
                <Button>
                  <Eye className="mr-2 h-4 w-4" />
                  View all
                </Button>
              </div>
              <Card>
                <CardContent className="p-6">
                  {loading ? (
                    <div className="space-y-4">
                      {Array.from({ length: 3 }).map((_, i) => (
                        <div key={i} className="flex items-center gap-4 p-4">
                          <Skeleton className="h-12 w-12 rounded-full" />
                          <div className="flex-1 space-y-2">
                            <Skeleton className="h-4 w-32" />
                            <Skeleton className="h-3 w-24" />
                            <Skeleton className="h-3 w-40" />
                          </div>
                          <div className="text-right space-y-2">
                            <Skeleton className="h-4 w-16" />
                            <Skeleton className="h-6 w-20" />
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : recentBookings.length > 0 ? (
                    <div className="space-y-4">
                      {recentBookings.map((booking, index) => (
                        <div key={booking.id}>
                          <div className="flex items-center gap-4 p-4">
                            <Avatar>
                              <AvatarImage src="" />
                              <AvatarFallback>
                                {booking.client_name.split(' ').map(n => n[0]).join('')}
                              </AvatarFallback>
                            </Avatar>
                            <div className="flex-1 min-w-0">
                              <div className="font-semibold truncate">{booking.client_name}</div>
                              <div className="text-muted-foreground truncate">{booking.title}</div>
                              <div className="flex items-center gap-4 text-sm text-muted-foreground">
                                <span>{formatDate(booking.date)}</span>
                                <span>{booking.group_size} guests</span>
                              </div>
                            </div>
                            <div className="text-right">
                              <div className="font-semibold">{formatCurrency(booking.total_sales)}</div>
                              <Badge 
                                variant={
                                  booking.status === 'confirmed' 
                                    ? 'default' 
                                    : booking.status === 'pending'
                                    ? 'secondary'
                                    : 'destructive'
                                }
                              >
                                {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
                              </Badge>
                            </div>
                          </div>
                          {index < recentBookings.length - 1 && <Separator />}
                        </div>
                      ))}
                    </div>
                  ) : (
                    <EmptyState 
                      icon={Calendar}
                      title="No Recent Bookings"
                      description="When you receive new bookings, they'll appear here. Start by creating your first experience or sharing your booking link."
                    />
                  )}
                </CardContent>
              </Card>
            </section>
          </div>
        </main>
      </div>
    </div>
  );
};

export default BusinessDashboard;